module Db exposing

    -- Initialization
    ( Connection
    , init

    -- Queries
    , Query
    , Statement
    , getOne
    , getMaybeOne
    , getAll
    , transaction
    , execute

    -- Errors
    , Error(..)
    )


import Db.Encode
import Db.Decode
import HttpClient exposing (Error(..), Response)
import Json.Encode
import Json.Decode
import Task exposing (Task)


-- INITIALIZATION


type alias Config =
    { credentials : Maybe { username : String, password : String }
    , url : String
    }


type Connection =
    Connection
        { credentials : Maybe { username : String, password : String }
        , url : String
        , httpPerm : HttpClient.Permission
        }


init : HttpClient.Permission -> Config -> Connection
init httpPerm { credentials, url } =
    Connection
        { credentials = credentials
        , url = url
        , httpPerm = httpPerm
        }


-- QUERIES


type alias Query a =
    { query : String
    , parameters : Array Db.Encode.Value
    , decoder : Db.Decode.Decoder a
    }


type alias Statement =
    { statement : String
    , parameters : Array Db.Encode.Value
    }


getOne : Connection -> Query a -> Task Error a
getOne connection query =
    getAll connection query
        |> Task.andThen toSingleResultTask


getMaybeOne : Connection -> Query a -> Task Error (Maybe a)
getMaybeOne connection query =
    getAll connection query
        |> Task.andThen toMaybeSingleResultTask


getAll : Connection -> Query a -> Task Error (Array a)
getAll (Connection { credentials, url, httpPerm }) { query, parameters, decoder } =
    let
        json =
            [ [ { key = "query"
                , value = Json.Encode.string query
                }
              , { key = "values"
                , value = Db.Encode.toJson parameters
                }
              ]
            ]
                |> toRequestJson credentials

        decodeResponse =
            Db.Decode.ws4sqlQueryResponse decoder
        in
        HttpClient.post url
            |> HttpClient.withJsonBody json
            -- TODO: replace expectJson usage with expectString
            -- so I can use my own Decode.decode function for improved error handling.
            -- Currently you'll get confusing error messages about the internal json
            -- decoders if you get an unexpected response body.
            |> HttpClient.expectJson decodeResponse
            |> HttpClient.send httpPerm
            |> Task.mapError mapHttpError
            |> Task.map .data


transaction : Connection -> Array Statement -> Task Error (Array Int)
transaction (Connection { credentials, url, httpPerm }) statements =
    let
        json =
            statements
                |> Array.map
                    (\{ statement, parameters } ->
                        [ { key = "statement"
                          , value = Json.Encode.string statement
                          }
                        , { key = "values"
                          , value = Db.Encode.toJson parameters
                          }
                        ]
                    )
                |> toRequestJson credentials

        -- _ =
        --     Debug.log "query" (Json.Encode.encode 0 json)
    in
    HttpClient.post url
        |> HttpClient.withJsonBody json
        |> HttpClient.expectJson Db.Decode.ws4sqlStatementResponse
        |> HttpClient.send httpPerm
        |> Task.mapError mapHttpError
        |> Task.map .data


execute : Connection -> Statement -> Task Error Int
execute connection statement =
    transaction connection [ statement ]
        |> Task.andThen toSingleResultTask


-- HELPERS


toSingleResultTask : Array a -> Task Error a
toSingleResultTask rows =
    when rows is
        [ a ] ->
            Task.succeed a

        [] ->
            Task.fail NoResultError

        _ ->
            Task.fail <|
                MultipleResultsError <|
                    Array.length rows


toMaybeSingleResultTask : Array a -> Task Error (Maybe a)
toMaybeSingleResultTask rows =
    when rows is
        [ a ] ->
            Task.succeed (Just a)

        _ ->
            Task.succeed Nothing


toRequestJson :
    Maybe { username : String, password : String } ->
    Array (Array { key : String, value : Json.Encode.Value }) ->
    Json.Encode.Value
toRequestJson credentials queries =
    -- See https://germ.gitbook.io/ws4sqlite/documentation/requests
    -- We want a request that looks like this:
    --     { 
    --         "transaction": [
    --             {
    --                 "query": "select * from User where id = ?",
    --                 "values": [ userId ]
    --             }
    --         ]
    --     }
    [ { key = "transaction"
      , value = Json.Encode.array Json.Encode.object queries
      }
    ]
        |> withCreds credentials
        |> Json.Encode.object


withCreds : 
    Maybe { username : String, password : String } ->
    Array { key : String, value : Json.Encode.Value } -> 
    Array { key : String, value : Json.Encode.Value }
withCreds credentials =
    Array.append <|
        when credentials is
            Just { username, password } ->
                [ { key = "credentials"
                  , value =
                    Json.Encode.object
                        [ { key = "username", value = Json.Encode.string username }
                        , { key = "password", value = Json.Encode.string password }
                        ]
                  }
                ]

            Nothing ->
                []



-- ERRORS


type Error
    = Error String
    | NoResultError
    | MultipleResultsError Int


mapHttpError : HttpClient.Error a -> Error
mapHttpError error =
    when error is
        BadStatus response ->
            -- TODO: figure out if/how I can get a string here without debug
            -- Can/Should the HttpClient.Error type change the BadStatus variant
            -- from `BadStatus (Response a)` to `BadStatus (Response Bytes)`?
            Error (Debug.toString response.data)

        _ ->
            Error (HttpClient.errorToString error)
        
