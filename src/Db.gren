module Db exposing

    -- Initialization
    ( Connection
    , init
    , withAuth
    , withLogFile
    -- After we have a way to open write stream
    -- without overwriting existing file contents:
    --, withLogStream

    -- Queries
    , Query
    , Statement
    , getOne
    , getMaybeOne
    , getAll
    , transaction
    , execute

    -- Errors
    , Error(..)
    )


import Bytes exposing (Bytes)
import Db.Encode
import Db.Decode
import FileSystem
import FileSystem.Path exposing (Path)
import HttpClient exposing (Error(..), Response)
import Json.Encode
import Json.Decode
import Stream
import Task exposing (Task)
import Time exposing (Month(..))


-- INITIALIZATION


type Connection =
    Connection
        { credentials : Maybe { user : String, password : String }
        , url : String
        , httpPerm : HttpClient.Permission
        , logFile : Maybe { permission : FileSystem.Permission, path : Path }
        }


init : HttpClient.Permission -> String -> Connection
init httpPerm url =
    Connection
        { credentials = Nothing
        , logFile = Nothing
        , httpPerm = httpPerm
        , url = url
        }


withAuth : { user : String, password : String } -> Connection -> Connection
withAuth creds (Connection config) =
    Connection
        { config
            | credentials = Just creds
        }


withLogFile : FileSystem.Permission -> Path -> Connection -> Connection
withLogFile fsPerm path (Connection config) =
    Connection
        { config
            | logFile = 
                Just
                    { permission = fsPerm
                    , path = path
                    }
        }


-- QUERIES


type alias Query a =
    { query : String
    , parameters : Array Db.Encode.Value
    , decoder : Db.Decode.Decoder a
    }


type alias Statement =
    { statement : String
    , parameters : Array Db.Encode.Value
    }


getOne : Connection -> Query a -> Task Error a
getOne connection query =
    getAll connection query
        |> Task.andThen toSingleResultTask


getMaybeOne : Connection -> Query a -> Task Error (Maybe a)
getMaybeOne connection query =
    getAll connection query
        |> Task.andThen toMaybeSingleResultTask


getAll : Connection -> Query a -> Task Error (Array a)
getAll (Connection { credentials, url, httpPerm, logFile }) { query, parameters, decoder } =
    let
        json =
            [ [ { key = "query"
                , value = Json.Encode.string query
                }
              , { key = "values"
                , value = Db.Encode.toJson parameters
                }
              ]
            ]
                |> toRequestJson credentials

        decodeResponse =
            Db.Decode.ws4sqlQueryResponse decoder
        in
        tryLog { logFile = logFile, url = url, json = json }
            |> Task.andThen
                (\_ ->
                    HttpClient.post url
                        |> HttpClient.withJsonBody json
                        |> HttpClient.expectJson decodeResponse
                        |> HttpClient.send httpPerm
                )
            |> Task.mapError mapHttpError
            |> Task.map .data


transaction : Connection -> Array Statement -> Task Error (Array Int)
transaction (Connection { credentials, url, httpPerm, logFile }) statements =
    let
        json =
            statements
                |> Array.map
                    (\{ statement, parameters } ->
                        [ { key = "statement"
                          , value = Json.Encode.string statement
                          }
                        , { key = "values"
                          , value = Db.Encode.toJson parameters
                          }
                        ]
                    )
                |> toRequestJson credentials
    in
    tryLog { logFile = logFile, url = url, json = json }
        |> Task.andThen (\_ ->
            HttpClient.post url
                |> HttpClient.withJsonBody json
                |> HttpClient.expectJson Db.Decode.ws4sqlStatementResponse
                |> HttpClient.send httpPerm
            )
        |> Task.mapError mapHttpError
        |> Task.map .data


execute : Connection -> Statement -> Task Error Int
execute connection statement =
    transaction connection [ statement ]
        |> Task.andThen toSingleResultTask


-- HELPERS


tryLog : 
    { logFile : Maybe { permission : FileSystem.Permission, path : Path }
    , url : String
    , json : Json.Encode.Value
    } ->
    Task x {}
tryLog { logFile, url, json } =
    when logFile is
        Just { permission, path } ->
            Time.now
                |> Task.map toIsoString
                |> Task.andThen
                    (\time ->
                        "{\"time\":\"" ++ time ++ "\","
                            |> String.append ("\"url\":\"" ++ url ++ "\",")
                            |> String.append "\"request\":"
                            |> String.append (Json.Encode.encode 0 json)
                            |> String.append "}\n"
                            |> Bytes.fromString
                            |> Task.succeed
                    )
                |> Task.andThen 
                    (\line -> 
                        FileSystem.appendToFile permission line path
                    )
                |> Task.map (\_ -> {})
                |> Task.onError (\_ -> Task.succeed {})

        Nothing ->
            Task.succeed {}


toIsoString : Time.Posix -> String
toIsoString time =
    let
        year =
            Time.toYear Time.utc time
                |> String.fromInt

        month =
            when (Time.toMonth Time.utc time) is
                Jan -> "01"
                Feb -> "02"
                Mar -> "03"
                Apr -> "04"
                May -> "05"
                Jun -> "06"
                Jul -> "07"
                Aug -> "08"
                Sep -> "09"
                Oct -> "10"
                Nov -> "11"
                Dec -> "12"

        day =
            Time.toDay Time.utc time
                |> String.fromInt
                |> String.padLeft 2 '0'

        hour =
            Time.toHour Time.utc time
                |> String.fromInt
                |> String.padLeft 2 '0'

        minute =
            Time.toMinute Time.utc time
                |> String.fromInt
                |> String.padLeft 2 '0'

        second =
            Time.toSecond Time.utc time
                |> String.fromInt
                |> String.padLeft 2 '0'
    in
    -- YYYY-MM-DDTHH:MM:SSZ
    year ++ "-" ++ month ++ "-" ++ day ++ "T" ++
    hour ++ ":" ++ minute ++ ":" ++ second ++ "Z"


toSingleResultTask : Array a -> Task Error a
toSingleResultTask rows =
    when rows is
        [ a ] ->
            Task.succeed a

        [] ->
            Task.fail NoResultError

        _ ->
            Task.fail <|
                MultipleResultsError <|
                    Array.length rows


toMaybeSingleResultTask : Array a -> Task Error (Maybe a)
toMaybeSingleResultTask rows =
    when rows is
        [ a ] ->
            Task.succeed (Just a)

        _ ->
            Task.succeed Nothing


toRequestJson :
    Maybe { user : String, password : String } ->
    Array (Array { key : String, value : Json.Encode.Value }) ->
    Json.Encode.Value
toRequestJson credentials queries =
    -- See https://germ.gitbook.io/ws4sqlite/documentation/requests
    -- We want a request that looks like this:
    --     { 
    --         "transaction": [
    --             {
    --                 "query": "select * from User where id = ?",
    --                 "values": [ userId ]
    --             }
    --         ]
    --     }
    [ { key = "transaction"
      , value = Json.Encode.array Json.Encode.object queries
      }
    ]
        |> withCreds credentials
        |> Json.Encode.object


withCreds : 
    Maybe { user : String, password : String } ->
    Array { key : String, value : Json.Encode.Value } -> 
    Array { key : String, value : Json.Encode.Value }
withCreds credentials =
    Array.append <|
        when credentials is
            Just { user, password } ->
                [ { key = "credentials"
                  , value =
                    Json.Encode.object
                        [ { key = "user", value = Json.Encode.string user }
                        , { key = "password", value = Json.Encode.string password }
                        ]
                  }
                ]

            Nothing ->
                []



-- ERRORS


type Error
    = Error String
    | NoResultError
    | MultipleResultsError Int


mapHttpError : HttpClient.Error a -> Error
mapHttpError =
    -- When https://github.com/gren-lang/node/issues/28 is fixed, improve this
    -- by matching on BadStatus to parse the "error" from the response body.
    -- See https://germ.gitbook.io/ws4sqlite/documentation/errors
    HttpClient.errorToString >> Error
