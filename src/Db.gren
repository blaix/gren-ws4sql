module Db exposing
    ( Connection
    , Error(..)
    , Query
    , init
    , getOne
    )


import Db.Encode
import Db.Decode
import HttpClient exposing (Error(..), Response)
import Json.Encode
import Json.Decode
import Task exposing (Task)


type alias Config =
    { credentials : Maybe { username : String, password : String }
    , url : String
    }


type Connection =
    Connection
        { credentials : Maybe { username : String, password : String }
        , url : String
        , httpPerm : HttpClient.Permission
        }


init : HttpClient.Permission -> Config -> Connection
init httpPerm { credentials, url } =
    Connection
        { credentials = credentials
        , url = url
        , httpPerm = httpPerm
        }


type Error =
    Error String


type alias Query a =
    { query : String
    , parameters : Array { key : String, value : Db.Encode.Value }
    , decoder : Db.Decode.Decoder a
    }


getOne : Connection -> Query a -> Task Error a
getOne (Connection { credentials, url, httpPerm }) { query, parameters, decoder } =
    let
        json =
            -- See https://germ.gitbook.io/ws4sqlite/documentation/requests
            -- We want a request that looks like this:
            --     { 
            --         "transaction": [
            --             {
            --                 "query": "select * from User where id = ?",
            --                 "values": [ userId ]
            --             }
            --         ]
            --     }
            [ { key = "transaction"
              , value = Json.Encode.array Json.Encode.object
                [ [ { key = "query"
                    , value = Json.Encode.string query
                    }
                  , { key = "values"
                    , value = Json.Encode.object parameters
                    }
                  ]
                ]
              }
            ]

        withCreds =
            when credentials is
                Just { username, password } ->
                    Array.append
                        json
                        [ { key = "credentials"
                          , value =
                            Json.Encode.object
                                [ { key = "username", value = Json.Encode.string username }
                                , { key = "password", value = Json.Encode.string password }
                                ]
                          }
                        ]

                Nothing ->
                    json

        encodedQuery =
            Json.Encode.object withCreds

        -- _ =
        --     Debug.log "query" <|
        --         Json.Encode.encode 0 encodedQuery
        

        decodeResponse =
            Db.Decode.ws4sqlResponse decoder
                |> Json.Decode.map
                    (\resultArray ->
                        when resultArray is
                            [ singleResult ] ->
                                singleResult
                            [] ->
                                Debug.todo "no result error"
                            _ ->
                                Debug.todo "too many results error"
                    )
        in
        HttpClient.post url
            |> HttpClient.withJsonBody encodedQuery
            |> HttpClient.expectJson decodeResponse
            |> HttpClient.send httpPerm
            |> Task.map .data
            |> Task.mapError mapHttpError


mapHttpError : HttpClient.Error a -> Error
mapHttpError error =
    when error is
        BadStatus response ->
            -- TODO: figure out if/how I can get a string here without debug
            -- Can/Should the HttpClient.Error type change the BadStatus variant
            -- from `BadStatus (Response a)` to `BadStatus (Response String)`?
            Error (Debug.toString response.data)

        _ ->
            Error (HttpClient.errorToString error)
        
