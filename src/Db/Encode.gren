module Db.Encode exposing
    ( Value

    -- fields
    , bool
    , float
    , int
    , null
    , posix
    , string

    --helpers
    , toJson
    )


import Json.Encode
import Time


type Value
    = Value
        { key : String
        , value : Json.Encode.Value
        }


bool : String -> Bool -> Value
bool field b =
    Value
        { key = field
        , value =
            if b then
                Json.Encode.int 1
            else
                Json.Encode.int 0
        }


float : String -> Float -> Value
float field f =
    Value
        { key = field
        , value = Json.Encode.float f
        }


int : String -> Int -> Value
int field i =
    Value
        { key = field
        , value = Json.Encode.int i
        }


null : String -> Value
null field =
    Value
        { key = field
        , value = Json.Encode.null
        }


posix : String -> Time.Posix -> Value
posix field t =
    Value
        { key = field
        , value =
            Time.posixToMillis t |> Json.Encode.int
        }


string : String -> String -> Value
string field s =
    Value
        { key = field
        , value = Json.Encode.string s
        }


-- HELPERS


toJson : Array Value -> Json.Encode.Value
toJson values =
    values
        |> Array.map unwrap
        |> Json.Encode.object


unwrap : Value -> { key : String, value : Json.Encode.Value }
unwrap (Value v) =
    v
