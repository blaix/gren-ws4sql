module Db.Decode exposing
    ( Decoder

    -- Primitives
    , bool
    , float
    , int
    , nullable
    , posix
    , string

    -- OBJECTS
    , field
    , ws4sqlQueryResponse
    , ws4sqlStatementResponse

    -- Mapping
    , map
    , map2
    , map3
    , map4
    , map5
    , map6
    , map7
    , map8
    )


import Db.Encode
import Json.Decode
import Json.Encode
import Time


type Decoder a
    = Decoder (Json.Decode.Decoder a)


-- TODO: error handling
type Error
    = Error


-- PRIMITIVES


bool : Decoder Bool
bool =
    Decoder <|
        -- https://www.sqlite.org/datatype3.html#boolean_datatype
        Json.Decode.oneOf
            [ Json.Decode.int
                |> Json.Decode.map (\i -> i /= 0)
            , Json.Decode.string
                |> Json.Decode.andThen
                    (\s ->
                        when s is
                            "TRUE" -> Json.Decode.succeed True
                            "FALSE" -> Json.Decode.succeed False
                            _ -> Json.Decode.fail "Got unexpected string in boolean field"
                    )
            ]


int : Decoder Int
int =
    Decoder (Json.Decode.int)


nullable : Decoder a -> Decoder (Maybe a)
nullable decoder =
    Decoder (Json.Decode.nullable (unwrap decoder))


float : Decoder Float
float =
    Decoder (Json.Decode.float)


posix : Decoder Time.Posix
posix =
    Json.Decode.int
        |> Json.Decode.map Time.millisToPosix
        |> Decoder


string : Decoder String
string =
    Decoder (Json.Decode.string)


-- OBJECTS


field : String -> Decoder a -> Decoder a
field name (Decoder decoder) =
    Decoder (Json.Decode.field name decoder) 


ws4sqlQueryResponse : Decoder a -> Json.Decode.Decoder (Array a)
ws4sqlQueryResponse decoder =
    -- See https://germ.gitbook.io/ws4sqlite/documentation/responses
    -- We will get a response that looks like this:
    --     {
    --         "results": [
    --             {
    --                 "success": true,
    --                 "resultHeaders": [ "id", "name" ],
    --                 "resultSet": [
    --                     { "id": 1, "name": "Justin" }
    --                 ]
    --             }
    --          ]
    --     }
    Json.Decode.map Array.flatten <|
        Json.Decode.field "results" <|
            -- TODO: handle success: false
            -- See https://germ.gitbook.io/ws4sqlite/documentation/responses
            Json.Decode.array <|
                Json.Decode.field "resultSet" <|
                    Json.Decode.array <|
                        (unwrap decoder)


ws4sqlStatementResponse : Json.Decode.Decoder (Array Int)
ws4sqlStatementResponse =
    -- See https://germ.gitbook.io/ws4sqlite/documentation/responses
    -- We will get a response that looks like this:
    --     {
    --         "results": [
    --             {
    --                 "success": true
    --                 "rowsUpdated": 1
    --             }
    --          ]
    --     }
    Json.Decode.field "results" <|
        -- TODO: handle success: false
        -- See https://germ.gitbook.io/ws4sqlite/documentation/responses
        Json.Decode.array <|
            Json.Decode.field "rowsUpdated" Json.Decode.int


-- RUN DECODERS


decode : Decoder a -> Db.Encode.Value -> Result Error a
decode decoder value =
    Json.Decode.decodeValue (unwrap decoder) value
        |> Result.mapError
            -- TODO: helpful error variants
            (\error ->
                Error
            )


unwrap : Decoder a -> Json.Decode.Decoder a
unwrap (Decoder inner) =
    inner


-- MAPPING

map : (a -> b) -> Decoder a -> Decoder b
map mapper (Decoder decoder) =
    Decoder (Json.Decode.map mapper decoder)


map2 : (a -> b -> c) -> Decoder a -> Decoder b -> Decoder c
map2 m (Decoder a) (Decoder b) =
    Decoder (Json.Decode.map2 m a b)


map3 : (a -> b -> c -> d) -> Decoder a -> Decoder b -> Decoder c -> Decoder d
map3 m (Decoder a) (Decoder b) (Decoder c) =
    Decoder (Json.Decode.map3 m a b c)


map4 : (a -> b -> c -> d -> e) -> Decoder a -> Decoder b -> Decoder c -> Decoder d -> Decoder e
map4 m (Decoder a) (Decoder b) (Decoder c) (Decoder d) =
    Decoder (Json.Decode.map4 m a b c d)


map5 : (a -> b -> c -> d -> e -> f) -> Decoder a -> Decoder b -> Decoder c -> Decoder d -> Decoder e -> Decoder f
map5 m (Decoder a) (Decoder b) (Decoder c) (Decoder d) (Decoder e) =
    Decoder (Json.Decode.map5 m a b c d e)


map6 : (a -> b -> c -> d -> e -> f -> g) -> Decoder a -> Decoder b -> Decoder c -> Decoder d -> Decoder e -> Decoder f -> Decoder g
map6 m (Decoder a) (Decoder b) (Decoder c) (Decoder d) (Decoder e) (Decoder f) =
    Decoder (Json.Decode.map6 m a b c d e f)


map7 : (a -> b -> c -> d -> e -> f -> g -> h) -> Decoder a -> Decoder b -> Decoder c -> Decoder d -> Decoder e -> Decoder f -> Decoder g -> Decoder h
map7 m (Decoder a) (Decoder b) (Decoder c) (Decoder d) (Decoder e) (Decoder f) (Decoder g) =
    Decoder (Json.Decode.map7 m a b c d e f g)


map8 : (a -> b -> c -> d -> e -> f -> g -> h -> i) -> Decoder a -> Decoder b -> Decoder c -> Decoder d -> Decoder e -> Decoder f -> Decoder g -> Decoder h -> Decoder i
map8 m (Decoder a) (Decoder b) (Decoder c) (Decoder d) (Decoder e) (Decoder f) (Decoder g) (Decoder h) =
    Decoder (Json.Decode.map8 m a b c d e f g h)
