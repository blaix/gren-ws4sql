module Main exposing (main)

import Db
import Db.Decode exposing (Decoder)
import Db.Encode
import Expect
import HttpClient
import Init
import Node
import Task exposing (Task)
import Test.Runner.Effectful exposing 
    ( await
    , awaitError
    , concat
    , describe
    , run
    , test
    )


config =
    { credentials = Nothing
    , url = "http://localhost:12321/test"
    }


type alias User =
    { id : Int
    , name : String
    }


setupDb : Db.Connection -> Task Db.Error (Array Int)
setupDb connection =
    Db.transaction connection
        [ { parameters = []
          , statement = "DROP TABLE IF EXISTS users"
          }
        , { parameters = []
          , statement =
            """
            CREATE TABLE users (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL
            )
            """
          }
        ]
            

userDecoder : Decoder User
userDecoder =
    Db.Decode.map2
        (\id name -> { id = id, name = name })
        (Db.Decode.field "id" Db.Decode.int)
        (Db.Decode.field "name" Db.Decode.string)



main : Node.SimpleProgram a
main =
    Node.defineSimpleProgram <| \env ->
        Init.await HttpClient.initialize <| \httpPerm ->
            run env <|
                let
                    connection =
                        Db.init httpPerm config

                    insert =
                        Db.execute connection
                            { statement = "insert into users (id, name) values (1, \"Sarah\")"
                            , parameters = []
                            }

                    get =
                        Db.getOne connection
                            { query = "select * from users where id = :id"
                            , parameters = [{ key = "id", value = Db.Encode.int 1 }]
                            , decoder = userDecoder
                            }
                in
                await (setupDb connection) "Initialize test db" <| \_ ->
                await insert "Insert test user" <| \insertResult ->
                await get "Get test user" <| \userResult ->
                    concat
                        [ test "insert affects 1 row" <| \_ ->
                            Expect.equal 1 insertResult

                        , test "get returns 1 user" <| \_ ->
                            userResult
                                |> Expect.equal 
                                    { id = 1
                                    , name = "Sarah"
                                    }
                        ]
