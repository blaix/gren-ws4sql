module Main exposing (main)

import Db exposing (Error(..))
import Db.Decode exposing (Decoder)
import Db.Encode
import Expect
import HttpClient
import Init
import Node
import Task exposing (Task)
import Test.Runner.Effectful exposing 
    ( await
    , awaitError
    , concat
    , describe
    , run
    , test
    )


config =
    { credentials = Nothing
    , url = "http://localhost:12321/test"
    }


type alias User =
    { id : Int
    , name : String
    }


setupDb : Db.Connection -> Task Db.Error (Array Int)
setupDb connection =
    Db.transaction connection
        [ { parameters = []
          , statement = "DROP TABLE IF EXISTS users"
          }
        , { parameters = []
          , statement =
            """
            CREATE TABLE users (
                id INTEGER,
                name TEXT NOT NULL
            )
            """
          }
        ]
            

userDecoder : Decoder User
userDecoder =
    Db.Decode.map2
        (\id name -> { id = id, name = name })
        (Db.Decode.field "id" Db.Decode.int)
        (Db.Decode.field "name" Db.Decode.string)



main : Node.SimpleProgram a
main =
    Node.defineSimpleProgram <| \env ->
        Init.await HttpClient.initialize <| \httpPerm ->
            run env <|
                let
                    connection =
                        Db.init httpPerm config

                    insert id =
                        Db.execute connection
                            { statement = "insert into users (id, name) values (:id, \"Sarah\")"
                            , parameters = [{ key = "id", value = Db.Encode.int id }]
                            }

                    get id =
                        Db.getOne connection
                            { query = "select * from users where id = :id"
                            , parameters = [{ key = "id", value = Db.Encode.int id }]
                            , decoder = userDecoder
                            }

                in
                await (setupDb connection) "Initialize test db" <| \_ ->
                await (insert 1) "Insert test user" <| \insertResult ->
                    concat
                        [ test "affects 1 row" <| \_ ->
                            Expect.equal 1 insertResult

                        , await (get 1) "Get test user" <| \userResult ->
                            test "returns 1 user" <| \_ ->
                                userResult
                                    |> Expect.equal 
                                        { id = 1
                                        , name = "Sarah"
                                        }

                        , awaitError (get 2) "Get non-existant user" <| \error ->
                            test "returns NoResultError" <| \_ ->
                                Expect.equal NoResultError error

                        , await (insert 1) "Insert duplicate user" <| \_ ->
                            awaitError (get 1) "Get one duplicated user" <| \error ->
                                test "returns MultipleResultsError" <| \_ ->
                                    Expect.equal (MultipleResultsError 2) error
                        ]
