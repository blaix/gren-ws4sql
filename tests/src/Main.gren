module Main exposing (main)

import Db exposing (Error(..))
import Db.Decode exposing (Decoder)
import Db.Encode
import Expect
import HttpClient
import Init
import Node
import Task exposing (Task)
import Test.Runner.Effectful exposing 
    ( Test
    , await
    , awaitError
    , concat
    , describe
    , run
    , test
    )


-- RUNNER


config =
    { credentials = Nothing
    , url = "http://localhost:12321/test"
    }


main : Node.SimpleProgram a
main =
    Node.defineSimpleProgram <| \env ->
        Init.await HttpClient.initialize <| \httpPerm ->
            let
                connection =
                    connect httpPerm
            in
            run env <|
                concat
                    [ executeTests connection
                    -- TODO: transaction tests
                    , getOneTests connection
                    , getMaybeOneTests connection
                    , getAllTests connection
                    ]


-- TESTS


executeTests : Db.Connection -> Test
executeTests connection =
    let
        execute =
            Db.execute connection
                { statement = "insert into users (id, name) values (1, \"one\")"
                , parameters = []
                }
    in
    await (reset connection) "Reset DB for execute tests" <| \_ ->
    await execute "Execute statement" <| \executeResult ->
        test "returns number of affected rows" <| \_ ->
            Expect.equal 1 executeResult


getOneTests : Db.Connection -> Test
getOneTests connection =
    await (initUsers connection [user1]) "Insert test user for getOne tests" <| \_ ->
        describe "Db.getOne"
            [ await (getOne connection user1.id) "Get test user" <| \result ->
                test "returns 1 user" <| \_ ->
                    Expect.equal user1 result

            , awaitError (getOne connection 99) "Get non-existant user" <| \error ->
                test "returns NoResultError" <| \_ ->
                    Expect.equal NoResultError error

            , await (initUsers connection [user1, user1]) "Insert duplicate users" <| \_ ->
                concat
                    [ awaitError (getOne connection 1) "Get one duplicated user" <| \error ->
                        test "returns MultipleResultsError" <| \_ ->
                            Expect.equal (MultipleResultsError 2) error

                    , await (getOneCustom connection 1 "select * from users limit 1") "Get one with limit" <| \result ->
                        test "returns one instance of user" <| \_ ->
                            Expect.equal user1 result
                    ]
            ]


getMaybeOneTests : Db.Connection -> Test
getMaybeOneTests connection =
    await (initUsers connection [user1]) "Insert test user for getMaybeOne tests" <| \_ ->
        describe "Db.getOne"
            [ await (getMaybeOne connection user1.id) "Maybe get test user" <| \result ->
                test "returns Just user" <| \_ ->
                    Expect.equal (Just user1) result

            , await (getMaybeOne connection 99) "Maybe get non-existant user" <| \result ->
                test "returns Nothing" <| \_ ->
                    Expect.equal Nothing result

            , await (initUsers connection [user1, user1]) "Insert duplicate users" <| \_ ->
                concat
                    [ await (getMaybeOne connection 1) "Maybe get one duplicated user" <| \result ->
                        test "returns Nothing" <| \_ ->
                            Expect.equal Nothing result

                    , await (getMaybeOneCustom connection 1 "select * from users limit 1") "Maybe get one with limit" <| \result ->
                        test "returns one instance of user" <| \_ ->
                            Expect.equal (Just user1) result
                    ]
            ]


getAllTests : Db.Connection -> Test
getAllTests connection =
    describe "Db.getAll tests"
        [ await (reset connection) "with no users" <| \_ ->
          await (getAll connection) "getAll" <| \result ->
              test "returns empty array" <| \_ ->
                  Expect.equal [] result

        , await (initUsers connection [user1]) "with one user" <| \_ ->
          await (getAll connection) "getAll" <| \result ->
              test "returns array with just the user" <| \_ ->
                  Expect.equal [user1] result

        , await (initUsers connection [user1, user2]) "with two users" <| \_ ->
          await (getAll connection) "getAll" <| \result ->
              test "returns array with both users" <| \_ ->
                  Expect.equal [user1, user2] result
        ]


-- USERS


type alias User =
    { id : Int
    , name : String
    }


userDecoder : Decoder User
userDecoder =
    Db.Decode.map2
        (\id name -> { id = id, name = name })
        (Db.Decode.field "id" Db.Decode.int)
        (Db.Decode.field "name" Db.Decode.string)


user1 : User
user1 =
    { id = 1, name = "one" }


user2 : User
user2 =
    { id = 2, name = "two" }


-- HELPERS


connect : HttpClient.Permission -> Db.Connection
connect permission =
    Db.init permission config


reset : Db.Connection -> Task Db.Error (Array Int)
reset connection =
    Db.transaction connection
        [ { parameters = []
          , statement =
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER,
                name TEXT NOT NULL
            )
            """
          }
        , { parameters = []
          , statement = "DELETE FROM users"
          }
        ]


insertUsers : Db.Connection -> Array User -> Task Db.Error (Array Int)
insertUsers connection users =
    users
        |> Array.map
            (\{id, name} ->
                { statement = "insert into users (id, name) values (:id, :name)"
                , parameters =
                    [ { key = "id", value = Db.Encode.int id }
                    , { key = "name", value = Db.Encode.string name }
                    ]
                }
            )
        |> Db.transaction connection


initUsers : Db.Connection -> Array User -> Task Db.Error (Array Int)
initUsers connection users =
    reset connection
        |> Task.andThen (\_ -> insertUsers connection users)


getOne : Db.Connection -> Int -> Task Db.Error User
getOne connection id =
    Db.getOne connection
        { query = "select * from users where id = :id"
        , parameters = [{ key = "id", value = Db.Encode.int id }]
        , decoder = userDecoder
        }


getMaybeOne : Db.Connection -> Int -> Task Db.Error (Maybe User)
getMaybeOne connection id =
    Db.getMaybeOne connection
        { query = "select * from users where id = :id"
        , parameters = [{ key = "id", value = Db.Encode.int id }]
        , decoder = userDecoder
        }


getOneCustom : Db.Connection -> Int -> String -> Task Db.Error User
getOneCustom connection id query =
    Db.getOne connection
        { query = query
        , parameters = [{ key = "id", value = Db.Encode.int id }]
        , decoder = userDecoder
        }


getMaybeOneCustom : Db.Connection -> Int -> String -> Task Db.Error (Maybe User)
getMaybeOneCustom connection id query =
    Db.getMaybeOne connection
        { query = query
        , parameters = [{ key = "id", value = Db.Encode.int id }]
        , decoder = userDecoder
        }


getAll : Db.Connection -> Task Db.Error (Array User)
getAll connection =
    Db.getAll connection
        { query = "select * from users order by id"
        , parameters = []
        , decoder = userDecoder
        }

