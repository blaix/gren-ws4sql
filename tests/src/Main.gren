module Main exposing (main)

import Db exposing (Error(..))
import Db.Decode exposing (Decoder)
import Db.Encode
import Expect
import HttpClient
import Init
import Node
import Task exposing (Task)
import Test.Runner.Effectful exposing 
    ( Test
    , await
    , awaitError
    , concat
    , describe
    , run
    , test
    )


config =
    { credentials = Nothing
    , url = "http://localhost:12321/test"
    }


type alias User =
    { id : Int
    , name : String
    }


userDecoder : Decoder User
userDecoder =
    Db.Decode.map2
        (\id name -> { id = id, name = name })
        (Db.Decode.field "id" Db.Decode.int)
        (Db.Decode.field "name" Db.Decode.string)


connect : HttpClient.Permission -> Db.Connection
connect permission =
    Db.init permission config


reset : Db.Connection -> Task Db.Error (Array Int)
reset connection =
    Db.transaction connection
        [ { parameters = []
          , statement =
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER,
                name TEXT NOT NULL
            )
            """
          }
        , { parameters = []
          , statement = "DELETE FROM users"
          }
        ]


insert : Db.Connection -> Int -> String -> Task Db.Error Int
insert connection id name =
    Db.execute connection
        { statement = "insert into users (id, name) values (:id, :name)"
        , parameters = 
            [ { key = "id", value = Db.Encode.int id }
            , { key = "name", value = Db.Encode.string name }
            ]
        }


getOne : Db.Connection -> Int -> Task Db.Error User
getOne connection id =
    Db.getOne connection
        { query = "select * from users where id = :id"
        , parameters = [{ key = "id", value = Db.Encode.int id }]
        , decoder = userDecoder
        }


main : Node.SimpleProgram a
main =
    Node.defineSimpleProgram <| \env ->
        Init.await HttpClient.initialize <| \httpPerm ->
            let
                connection =
                    connect httpPerm
            in
            run env <|
                concat
                    [ executeTests connection
                    -- TODO: transaction tests
                    , getOneTests connection
                    ]


executeTests : Db.Connection -> Test
executeTests connection =
    await (reset connection) "Reset DB for execute tests" <| \_ ->
    await (insert connection 123 "Justin") "Execute statement" <| \executeResult ->
        test "returns number of affected rows" <| \_ ->
            Expect.equal 1 executeResult


getOneTests : Db.Connection -> Test
getOneTests connection =
    await (reset connection) "Reset DB for getOne tests" <| \_ ->
    await (insert connection 1 "Sarah") "Insert test user" <| \_ ->
        describe "Db.getOne"
            [ await (getOne connection 1) "Get test user" <| \userResult ->
                test "returns 1 user" <| \_ ->
                    userResult
                        |> Expect.equal 
                            { id = 1
                            , name = "Sarah"
                            }

            , awaitError (getOne connection 2) "Get non-existant user" <| \error ->
                test "returns NoResultError" <| \_ ->
                    Expect.equal NoResultError error

            , await (insert connection 1 "Another Sarah") "Insert duplicate user" <| \_ ->
                awaitError (getOne connection 1) "Get one duplicated user" <| \error ->
                    test "returns MultipleResultsError" <| \_ ->
                        Expect.equal (MultipleResultsError 2) error
            ]
